name: "Python CI"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      
      - name: "Set up Python 3.11"
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: "Install dependencies"
        run: pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      
      - name: "Set up Python 3.11"
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: "Install dependencies"
        run: pip install -r requirements.txt
      
      - name: "Run tests"
        id: pytest
        run: pytest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCOGS_TOKEN: ${{ secrets.DISCOGS_TOKEN }}
          DISCOGS_SELLER_USERNAME: ${{ secrets.DISCOGS_SELLER_USERNAME }}
      
      - name: "Send email notification on test failure"
        if: failure() && steps.pytest.outcome == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "CI Tests Failed: ${{ github.repository }} - ${{ github.ref_name }}"
          to: ${{ github.event.pusher.email }}
          from: ${{ secrets.MAIL_FROM }}
          body: |
            Tests failed for commit ${{ github.sha }} by ${{ github.actor }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.event.head_commit.message }}
            
            View workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  require-approval:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    needs: test
    
    steps:
      - name: "Check for required approvals"
        uses: actions/github-script@v6
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const approvals = reviews.filter(review => review.state === 'APPROVED');
            const uniqueApprovers = new Set(approvals.map(review => review.user.login));
            
            if (uniqueApprovers.has(context.actor)) {
              uniqueApprovers.delete(context.actor);
            }
            
            if (uniqueApprovers.size < 1) {
              core.setFailed('At least one other developer must approve this PR before merging to main');
            } else {
              core.info(`PR has ${uniqueApprovers.size} approval(s) from other developers`);
            }